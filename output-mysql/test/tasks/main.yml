  - name: Install MySQL server
    package:
      name: mysql-server
      state: present
      version: '{{ mysql_version }}'
  - name: Create and start MySQL service
    service:
      name: mysql
      state: started
      enabled: true
  - name: Include test::yum_repo recipe
    include_recipe: test::yum_repo
  - name: Set apparmor disable attribute
    set_fact:
      apparmor_disable: true
  - name: Include apparmor recipe
    include_recipe: apparmor
  - name: Create and start MySQL service
    mysql_service:
      name: default
      version: '{{ mysql_test_version }}'
      initial_root_password: '{{ root_pass }}'
      action:
        - create
        - start
  - name: Wait for MySQL server to start
    wait_for:
      command: /usr/bin/mysql -u root -p{{ root_pass | quote }} -e 'SELECT 0'
      timeout: 60
      sleep: 1
  - name: Create datatrout schema
    mysql_db:
      name: datatrout
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
    when: not troutmarker.stat.exists
  - name: Touch troutmarker file
    file:
      path: /tmp/troutmarker
      state: touch
    when: not troutmarker.stat.exists
  - name: Create datasalmon schema
    mysql_db:
      name: datasalmon
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
    when: not salmonmarker.stat.exists
  - name: Touch salmonmarker file
    file:
      path: /tmp/salmonmarker
      state: touch
    when: not salmonmarker.stat.exists
  - name: Create kermit user
    mysql_user:
      name: kermit
      host: localhost
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
    when: not kermitmarker.stat.exists
  - name: Touch kermitmarker file
    file:
      path: /tmp/kermitmarker
      state: touch
    when: not kermitmarker.stat.exists
  - name: Create rowlf user with password
    mysql_user:
      name: rowlf
      host: localhost
      password: hunter2
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
    when: not rowlfmarker.stat.exists
  - name: Touch rowlfmarker file
    file:
      path: /tmp/rowlfmarker
      state: touch
    when: not rowlfmarker.stat.exists
  - name: Create statler user with password
    mysql_user:
      name: statler
      host: localhost
      password: hunter2
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
    when: not statlermarker.stat.exists
  - name: Touch statlermarker file
    file:
      path: /tmp/statlermarker
      state: touch
    when: not statlermarker.stat.exists
  - name: Create rizzo user with password and grant
    mysql_user:
      name: rizzo
      host: 127.0.0.1
      password: hunter2
      priv: datasalmon.*:SELECT
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
    when: not rizzomarker.stat.exists
  - name: Touch rizzomarker file
    file:
      path: /tmp/rizzomarker
      state: touch
    when: not rizzomarker.stat.exists
  - name: Create databass database
    mysql_db:
      name: databass
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Drop datatrout database
    mysql_db:
      name: datatrout
      state: absent
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Create piggy user
    mysql_user:
      name: piggy
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Drop kermit user
    mysql_user:
      name: kermit
      state: absent
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Update rowlf user password
    mysql_user:
      name: rowlf
      password: '*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9'
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Create gonzo user with host
    mysql_user:
      name: gonzo
      password: abcdef
      host: 10.10.10.%
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Ensure gonzo user is idempotent
    mysql_user:
      name: gonzo
      password: abcdef
      host: 10.10.10.%
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Update statler user with hashed password
    mysql_user:
      name: statler
      password: '*2027D9391E714343187E07ACB41AE8925F30737E'
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Create camilla user with global privileges
    mysql_user:
      name: camilla
      password: bokbokbok
      priv:
        - SELECT
        - REPL_CLIENT
        - CREATE_TMP_TABLE
        - SHOW_DB
      require_ssl: true
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Grant privileges to camilla user
    mysql_user:
      name: camilla
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Create fozzie user with database privileges
    mysql_user:
      name: fozzie
      password: wokkawokka
      host: mars
      priv: databass.*:SELECT,UPDATE,INSERT
      require_ssl: true
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Grant privileges to fozzie user
    mysql_user:
      name: fozzie
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Create moozie user with hashed password and database privileges
    mysql_user:
      name: moozie
      password: '*F798E7C0681068BAE3242AA2297D2360DBBDA62B'
      host: 127.0.0.1
      priv: databass.*:SELECT,UPDATE,INSERT
      require_ssl: false
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Grant privileges to moozie user
    mysql_user:
      name: moozie
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Create bunsen user with all privileges
    mysql_user:
      name: bunsen
      password: burner
      host: localhost
      priv: '*.*:ALL'
      grant_option: true
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Grant privileges to bunsen user
    mysql_user:
      name: bunsen
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Create waldorf user with select privilege
    mysql_user:
      name: waldorf
      password: InTheBalcony
      priv: databass.*:SELECT
      state: present
      login_user: bunsen
      login_password: burner
  - name: Grant privileges to waldorf user
    mysql_user:
      name: waldorf
      state: present
      login_user: bunsen
      login_password: burner
  - name: Update rizzo user password
    mysql_user:
      name: rizzo
      password: salmon
      host: 127.0.0.1
      priv: datasalmon.*:SELECT
      require_ssl: false
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Create beaker user with localhost
    mysql_user:
      name: beaker
      password: meep
      host: localhost
      use_native_auth: false
      state: present
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Flush privileges
    mysql_query:
      db: databass
      query: FLUSH PRIVILEGES
      login_user: root
      login_password: '{{ root_pass }}'
  - name: Update apt cache
    apt:
      update_cache: true
  - name: Disable AppArmor
    include_role:
      name: apparmor
    vars:
      apparmor_disable: true
  - name: Debug message
    debug:
      msg: "\n\n========================================\n\nTesting MySQL version
        '{{ mysql_test_version }}'\n\n========================================"
  - name: Create and start MySQL master service
    mysql_service:
      name: master
      port: 3306
      version: '{{ mysql_test_version }}'
      initial_root_password: '{{ root_pass_master }}'
      state: started
  - name: Configure master replication
    template:
      src: replication-master.erb
      dest: /etc/mysql-master/conf.d/replication.cnf
    vars:
      server_id: '1'
      mysql_instance: master
    notify: Restart MySQL master
  - name: Create MySQL client for master
    mysql_client:
      name: master
  - name: Create and start MySQL slave-1 service
    mysql_service:
      name: slave-1
      port: 3307
      version: '{{ mysql_test_version }}'
      initial_root_password: '{{ root_pass_slave }}'
      state: started
  - name: Configure replication for slave-1
    template:
      src: replication-slave.erb
      dest: /etc/mysql-slave-1/conf.d/replication.cnf
    vars:
      server_id: '2'
      mysql_instance: slave-1
    notify: Restart MySQL slave-1
  - name: Create and start MySQL slave-2 service
    mysql_service:
      name: slave-2
      port: 3308
      version: '{{ mysql_test_version }}'
      initial_root_password: '{{ root_pass_slave }}'
      state: started
  - name: Configure replication for slave-2
    template:
      src: replication-slave.erb
      dest: /etc/mysql-slave-2/conf.d/replication.cnf
    vars:
      server_id: '3'
      mysql_instance: slave-2
    notify: Restart MySQL slave-2
  - name: Wait for slave-2 to start
    wait_for:
      port: 3308
      delay: 1
      timeout: 60
  - name: Create replication user on master
    mysql_user:
      name: repl
      host: 127.0.0.1
      password: REPLICAAATE
      priv: '*.*:REPLICATION SLAVE'
      login_user: root
      login_password: '{{ root_pass_master }}'
      login_host: 127.0.0.1
      login_port: 3306
      state: present
  - name: Create dump file
    mysql_db:
      name: all
      state: dump
      target: /root/dump.sql
      login_user: root
      login_password: '{{ root_pass_master }}'
      login_host: 127.0.0.1
      login_port: 3306
      single_transaction: true
      master_data: '{% if mysql_test_version | int >= 8 %}2{% else %}1{% endif %}'
    when: not dump_file.stat.exists
  - name: Stash replication start position
    shell: "head /root/dump.sql -n80 | grep 'MASTER_LOG_POS' | awk '{ print $6 }'
      | cut -f2 -d '=' | cut -f1 -d';' > /root/position\n"
    when: not position_file.stat.exists
  - name: Import dump into slave-1
    mysql_db:
      name: all
      state: import
      target: /root/dump.sql
      login_user: root
      login_password: '{{ root_pass_slave }}'
      login_host: 127.0.0.1
      login_port: 3307
    when: not slave1_replicated.stdout
  - name: Import dump into slave-2
    mysql_db:
      name: all
      state: import
      target: /root/dump.sql
      login_user: root
      login_password: '{{ root_pass_slave }}'
      login_host: 127.0.0.1
      login_port: 3308
    when: not slave2_replicated.stdout
  - name: Start replication on slave-1
    mysql_replication:
      mode: startslave
      login_user: root
      login_password: '{{ root_pass_slave }}'
      login_host: 127.0.0.1
      login_port: 3307
    when: not slave1_replicating.stdout
  - name: Start replication on slave-2
    mysql_replication:
      mode: startslave
      login_user: root
      login_password: '{{ root_pass_slave }}'
      login_host: 127.0.0.1
      login_port: 3308
    when: not slave2_replicating.stdout
  - name: Create databass on master
    mysql_db:
      name: databass
      state: present
      login_user: root
      login_password: '{{ root_pass_master }}'
      login_host: 127.0.0.1
      login_port: 3306
    when: not databass_exists.stdout
  - name: Create table1 in databass
    mysql_query:
      db: databass
      query: CREATE TABLE table1 (name VARCHAR(20), userRank VARCHAR(20))
      login_user: root
      login_password: '{{ root_pass_master }}'
      login_host: 127.0.0.1
      login_port: 3306
    when: not databass_exists.stdout
  - name: Insert data into table1
    mysql_query:
      db: databass
      query: INSERT INTO table1 (name,userRank) VALUES ('captain','awesome')
      login_user: root
      login_password: '{{ root_pass_master }}'
      login_host: 127.0.0.1
      login_port: 3306
    when: not databass_exists.stdout
  - name: Create group 'alice'
    group:
      name: alice
      state: present
  - name: Create user 'alice'
    user:
      name: alice
      group: alice
      home: /
      state: present
  - name: Create group 'bob'
    group:
      name: bob
      state: present
  - name: Create user 'bob'
    user:
      name: bob
      group: bob
      home: /
      state: present
  - name: Create and start MySQL service 'instance-1'
    mysql_db:
      name: instance-1
      config_file: /etc/mysql/instance-1.cnf
      state: present
    vars:
      mysql_version: '{{ mysql_version }}'
      mysql_bind_address: 0.0.0.0
      mysql_port: '3307'
      mysql_datadir: /data/instance-1
      mysql_user: alice
      mysql_group: alice
    notify:
      - Start MySQL service 'instance-1'
  - name: Create and start MySQL service 'instance-2'
    mysql_db:
      name: instance-2
      config_file: /etc/mysql/instance-2.cnf
      state: present
    vars:
      mysql_version: '{{ mysql_version }}'
      mysql_bind_address: 0.0.0.0
      mysql_port: '{{ mysql_port }}'
      mysql_datadir: '{{ mysql_datadir }}'
      mysql_user: '{{ mysql_user }}'
      mysql_group: '{{ mysql_group }}'
      mysql_root_password: '{{ mysql_root_password }}'
    notify:
      - Start MySQL service 'instance-2'
  - name: Update apt cache
    apt:
      update_cache: true
  - name: Install MySQL client
    package:
      name: mysql-client
      state: present
      version: '{{ mysql_test_version }}'
  - name: Create MySQL configuration 'hello' for default instance
    template:
      src: hello.conf.j2
      dest: /etc/mysql/mysql.conf.d/hello.cnf
    vars:
      mysql_version: '{{ mysql_version }}'
    notify: Restart MySQL
  - name: Create MySQL configuration 'hello_again' for foo instance
    template:
      src: hello.conf.j2
      dest: /etc/mysql/foo/hello_again.cnf
    vars:
      mysql_version: '{{ mysql_version }}'
    notify: Restart MySQL
  - name: Add MySQL community repository
    yum_repository:
      name: mysql_community
      description: MySQL Community Repository
      baseurl: http://repo.mysql.com/yum/mysql-{{ mysql_test_version }}-community/el/{{
        ansible_distribution_major_version }}/$basearch/
      gpgcheck: true
      gpgkey: https://repo.mysql.com/RPM-GPG-KEY-mysql
    when: mysql_test is defined and ansible_facts['os_family'] != 'Debian'
  - name: Update apt cache
    apt:
      update_cache: true
  - name: Enable yum-mysql-community repository for MySQL 5.6
    include_tasks: mysql56.yml
    when:
      - ansible_facts['os_family'] in ['RedHat', 'Fedora']
      - mysql_test_version == '5.6'
  - name: Enable yum-mysql-community repository for MySQL 5.7
    include_tasks: mysql57.yml
    when:
      - ansible_facts['os_family'] in ['RedHat', 'Fedora']
      - mysql_test_version == '5.7'
  - name: Install MySQL server
    package:
      name: mysql-server-{{ mysql_test_version }}
      state: present
